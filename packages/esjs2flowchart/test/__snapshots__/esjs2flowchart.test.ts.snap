// Vitest Snapshot v1

exports[`test > test 1`] = `
{
  "body": [
    {
      "body": [
        {
          "body": [
            {
              "body": [],
              "isBodyEntry": false,
              "key": "consequent",
              "name": "return true",
              "parent": [Circular],
              "type": "ReturnStatement",
            },
            {
              "body": [],
              "isBodyEntry": false,
              "key": "alternate",
              "name": "return false",
              "parent": [Circular],
              "type": "ReturnStatement",
            },
          ],
          "isBodyEntry": false,
          "key": "body",
          "name": "(true)",
          "parent": [Circular],
          "subType": "IfStatement",
          "type": "Conditional",
        },
      ],
      "isBodyEntry": false,
      "key": "program",
      "name": "function test()",
      "parent": [Circular],
      "pathParentType": "Program",
      "subType": "FunctionDeclaration",
      "type": "Function",
    },
  ],
  "isBodyEntry": false,
  "key": "program",
  "name": "Program: source module",
  "parent": [
    [Circular],
  ],
  "type": "Program",
}
`;

exports[`test > test top level await 1`] = `
{
  "body": [
    {
      "body": [
        {
          "body": [],
          "isBodyEntry": false,
          "key": "body",
          "name": "const response = await fetch('https://google.com')",
          "parent": [Circular],
          "type": "VariableDeclarator",
        },
      ],
      "isBodyEntry": false,
      "key": "program",
      "name": "function init()",
      "parent": [Circular],
      "pathParentType": "Program",
      "subType": "FunctionDeclaration",
      "type": "Function",
    },
    {
      "body": [
        {
          "isBodyEntry": false,
          "key": "consequent",
          "name": "init()",
          "parent": [Circular],
          "type": "CallExpression",
        },
      ],
      "isBodyEntry": false,
      "key": "program",
      "name": "(true)",
      "parent": [Circular],
      "subType": "IfStatement",
      "type": "Conditional",
    },
  ],
  "isBodyEntry": false,
  "key": "program",
  "name": "Program: source module",
  "parent": [
    [Circular],
  ],
  "type": "Program",
}
`;
